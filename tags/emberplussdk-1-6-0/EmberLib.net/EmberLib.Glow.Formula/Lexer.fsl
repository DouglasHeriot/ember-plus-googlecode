{
// EmberLib.net -- .NET implementation of the Ember+ Protocol
// Copyright (C) 2012  L-S-B Broadcast Technologies GmbH
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 2.1 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

module internal EmberLib.Glow.Formula.Lexer

open System
open Microsoft.FSharp.Text.Lexing
open Parser
open System.Collections.Generic
open System.Globalization
open System.Text
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers

let lexeme (lexbuf : LexBuffer<char>) = LexBuffer<_>.LexemeString lexbuf

let dbg value =
    //printf "%A " value
    value

let lookup =
    let keywordMap =
        let temp = new Dictionary<_,_>(StringComparer.CurrentCultureIgnoreCase)
        temp.Add("sin", SIN)
        temp.Add("cos", COS)
        temp.Add("tan", TAN)
        temp.Add("sinh", SINH)
        temp.Add("cosh", COSH)
        temp.Add("tanh", TANH)
        temp.Add("asin", ASIN)
        temp.Add("acos", ACOS)
        temp.Add("atan", ATAN)
        temp.Add("sqrt", SQRT)
        temp.Add("pi", PI)
        temp.Add("e", E)
        temp.Add("log", LOG)
        temp.Add("round", ROUND)
        temp.Add("ceil", CEIL)
        temp.Add("int", INT)
        temp.Add("float", FLOAT)
        temp.Add("exp", EXP)
        temp.Add("abs", ABS)
        temp.Add("sgn", SGN)
        temp
    fun word ->
        let (result, value) = keywordMap.TryGetValue(word)
        if result = true then
            value
        else
            failwithf "Unknown keyword: %s" word
}

let digit = ['0'-'9']
let hexdigit = ['0'-'9''a'-'f''A'-'F']
let binarydigit = ['0'-'1']
let octaldigit = ['0'-'7']
let whitespace = [' ' '\t']
let newline = ('\n' | '\r' '\n')
let word = ['_''a'-'z''A'-'Z']['_''a'-'z''A'-'Z''0'-'9']*
let double = digit+ (('.' digit+ (['e''E'] ['-''+'] digit+)?) | (['e''E'] ['-''+'] digit+))
let integer = digit+

rule token = parse
| whitespace                    { token lexbuf }
| newline                       { lexbuf.EndPos <- lexbuf.EndPos.NextLine; token lexbuf }
| "("                           { dbg LPAREN }
| ")"                           { dbg RPAREN }
| ","                           { dbg COMMA }
| "*"                           { dbg ASTERISK }
| "/"                           { dbg SLASH }
| "\\"                          { dbg BACKSLASH }
| "%"                           { dbg PERCENT }
| "+"                           { dbg PLUS }
| "-"                           { dbg MINUS }
| "^"                           { dbg POW }
| "$"                           { dbg IT }
| word                          { dbg (lookup (lexeme lexbuf)) }
| double                        { dbg (DOUBLE(Double.Parse(lexeme lexbuf, CultureInfo.InvariantCulture))) }
| integer                       { dbg (INTEGER(Int64.Parse(lexeme lexbuf))) }
| eof                           { dbg EOF }
